# DeFindex SDK - Complete Documentation

## Overview
The DeFindex SDK is the official TypeScript SDK for DeFindex, a decentralized vault management system built on the Stellar network using Soroban smart contracts. This SDK provides server-side access to all DeFindex functionality including vault operations, factory deployments, authentication, transaction management, and administrative operations for the DeFindex ecosystem.

## Architecture

### Core Components

#### 1. DefindexSDK (Main SDK Class)
- **Location**: `src/defindex-sdk.ts`
- **Purpose**: Main orchestrator class that provides access to all DeFindex API functionality
- **Key Features**:
  - JWT-based authentication with email/password
  - Centralized HTTP client management
  - Network-aware operations (MAINNET/TESTNET)
  - Type-safe method signatures
  - Role-based access control for administrative operations

#### 2. HttpClient
- **Location**: `src/clients/http-client.ts`
- **Purpose**: Centralized HTTP communication with Bearer token authentication and error handling
- **Key Features**:
  - Automatic Bearer token authentication
  - BigInt serialization support
  - Comprehensive error transformation
  - Request/response interceptors
  - URL query parameter building

#### 3. Type System
- **Location**: `src/types/` (now `src/defindex_types/`)
- **Purpose**: Comprehensive TypeScript type definitions for all SDK operations
- **Components**:
  - `base.types.ts`: Core enums (SupportedNetworks) and base interfaces
  - `auth.types.ts`: Authentication and user management types
  - `factory.types.ts`: Vault factory configuration and response types
  - `vault.types.ts`: Vault operations, deposits, withdrawals, and management types
  - `stellar.types.ts`: Transaction and blockchain interaction types
  - `error.types.ts`: Error handling and validation types
  - `network.types.ts`: Network configuration types

## Authentication System

### Authentication Methods

#### API Key Authentication (Recommended)
- **Method**: Bearer token authentication with API keys
- **Flow**: API key → Bearer token → API requests
- **Features**: Simple, stateless authentication
- **Security**: Server-side only, API keys should not be exposed to frontend

#### JWT Authentication (Alternative)
- **Method**: Bearer token authentication with JWT tokens
- **Flow**: Email/password login → JWT access token → API requests
- **Features**: Token refresh, automatic login, role-based access
- **Security**: Server-side only, credentials should not be exposed to frontend

### Configuration
```typescript
interface DefindexSDKConfig {
  apiKey?: string;         // API key for authentication (recommended)
  email?: string;          // Email for automatic login (alternative to API key)
  password?: string;       // Password for automatic login (alternative to API key)
  baseUrl?: string;        // Custom API base URL (defaults to 'https://api.defindex.io')
  timeout?: number;        // Request timeout in ms (defaults to 30000)
}
```

## API Operations

### 1. Authentication Operations

#### User Registration
- **Method**: `register(registerParams: RegisterParams)`
- **Purpose**: Register new user account
- **Parameters**:
  - `email`: User email address
  - `password`: Secure password
  - `username`: Display username
- **Returns**: `RegisterResponse` - Registration confirmation

#### User Login
- **Method**: `login(loginParams: LoginParams)`
- **Purpose**: Authenticate user and obtain JWT tokens
- **Parameters**:
  - `email`: User email address
  - `password`: User password
- **Returns**: `LoginResponse` - Access token, refresh token, and user info

#### Token Refresh
- **Method**: `refreshToken()`
- **Purpose**: Refresh expired access token
- **Returns**: `RefreshTokenResponse` - New access token

### 2. API Key Management

#### Generate API Key
- **Method**: `generateApiKey(request: ApiKeyGenerateRequest)`
- **Purpose**: Create new API key for programmatic access
- **Parameters**:
  - `name`: Descriptive name for the API key
- **Returns**: `ApiKeyResponse` - API key details (key only returned once)

#### List User API Keys
- **Method**: `getUserApiKeys()`
- **Purpose**: Retrieve all API keys for authenticated user
- **Returns**: `ApiKeyInfo[]` - Array of API key metadata

#### Revoke API Key
- **Method**: `revokeApiKey(keyId: number)`
- **Purpose**: Permanently revoke an API key
- **Parameters**:
  - `keyId`: ID of the API key to revoke
- **Returns**: `RevokeApiKeyResponse` - Revocation confirmation

### 3. Factory Operations

#### Get Factory Address
- **Method**: `getFactoryAddress(network: SupportedNetworks)`
- **Purpose**: Retrieve factory contract address for vault creation
- **Parameters**:
  - `network`: Target network (MAINNET/TESTNET)
- **Returns**: `FactoryAddress` - Factory contract address

#### Create Vault
- **Method**: `createVault(vaultConfig: CreateDefindexVault, network: SupportedNetworks)`
- **Purpose**: Create new vault with specified configuration
- **Parameters**:
  - `roles`: Role assignments (Emergency Manager, Fee Receiver, Vault Manager, Rebalance Manager)
  - `vault_fee_bps`: Vault fee in basis points
  - `assets`: Array of assets and their strategies
  - `name_symbol`: Vault name and symbol
  - `upgradable`: Whether vault is upgradable
  - `caller`: Creator address
- **Returns**: `CreateVaultResponse` - Transaction XDR and simulation result

#### Create Vault with Deposit
- **Method**: `createVaultWithDeposit(vaultConfig: CreateDefindexVaultDepositDto, network: SupportedNetworks)`
- **Purpose**: Create vault and make initial deposit in single transaction
- **Parameters**:
  - All vault creation parameters plus:
  - `deposit_amounts`: Initial deposit amounts for each asset
- **Returns**: `CreateVaultResponse` - Transaction XDR and simulation result

### 4. Vault Operations

#### Get Vault Information
- **Method**: `getVaultInfo(vaultAddress: string, network: SupportedNetworks)`
- **Purpose**: Retrieve comprehensive vault information
- **Parameters**:
  - `vaultAddress`: Vault contract address
  - `network`: Target network
- **Returns**: `VaultInfo` - Detailed vault information including assets, strategies, fees, and metadata

#### Get Vault Balance
- **Method**: `getVaultBalance(vaultAddress: string, userAddress: string, network: SupportedNetworks)`
- **Purpose**: Get user's balance in specific vault
- **Parameters**:
  - `vaultAddress`: Vault contract address
  - `userAddress`: User wallet address
  - `network`: Target network
- **Returns**: `VaultBalance` - User's vault shares and underlying asset values

#### Deposit to Vault
- **Method**: `depositToVault(vaultAddress: string, depositData: DepositToVaultParams, network: SupportedNetworks)`
- **Purpose**: Deposit assets into vault
- **Parameters**:
  - `amounts`: Array of asset amounts to deposit
  - `caller`: Depositor address
  - `invest`: Whether to auto-invest after deposit (default: true)
  - `slippageBps`: Slippage tolerance in basis points (default: 0)
- **Returns**: `DepositResponse` - Transaction XDR and expected shares to mint

#### Withdraw from Vault (by Amount)
- **Method**: `withdrawFromVault(vaultAddress: string, withdrawData: WithdrawFromVaultParams, network: SupportedNetworks)`
- **Purpose**: Withdraw specific amounts from vault
- **Parameters**:
  - `amounts`: Array of specific amounts to withdraw
  - `caller`: Withdrawer address
  - `slippageBps`: Slippage tolerance in basis points
- **Returns**: `WithdrawResponse` - Transaction XDR and shares to burn

#### Withdraw from Vault (by Shares)
- **Method**: `withdrawShares(vaultAddress: string, shareData: WithdrawSharesParams, network: SupportedNetworks)`
- **Purpose**: Withdraw by burning vault shares
- **Parameters**:
  - `shares`: Number of vault shares to burn
  - `caller`: Withdrawer address
  - `slippageBps`: Slippage tolerance in basis points
- **Returns**: `WithdrawSharesResponse` - Transaction XDR and expected amounts

#### Get Vault APY
- **Method**: `getVaultAPY(vaultAddress: string, network: SupportedNetworks)`
- **Purpose**: Retrieve current vault APY information
- **Parameters**:
  - `vaultAddress`: Vault contract address
  - `network`: Target network
- **Returns**: `VaultAPY` - APY percentage, calculation period, and last update

### 5. Vault Management (Admin Operations)

#### Emergency Rescue
- **Method**: `emergencyRescue(vaultAddress: string, rescueData: RescueFromVaultParams, network: SupportedNetworks)`
- **Purpose**: Emergency rescue operation for vault funds (Emergency Manager role required)
- **Parameters**:
  - `strategy_address`: Strategy to rescue from
  - `caller`: Emergency manager address
- **Returns**: `RescueResponse` - Transaction XDR and rescued assets

#### Pause Strategy
- **Method**: `pauseStrategy(vaultAddress: string, pauseData: PauseStrategyParams, network: SupportedNetworks)`
- **Purpose**: Pause a specific strategy (Strategy Manager role required)
- **Parameters**:
  - `strategy_address`: Strategy to pause
  - `caller`: Strategy manager address
- **Returns**: `StrategyResponse` - Transaction XDR and strategy status

#### Unpause Strategy
- **Method**: `unpauseStrategy(vaultAddress: string, unpauseData: UnpauseStrategyParams, network: SupportedNetworks)`
- **Purpose**: Unpause a specific strategy (Strategy Manager role required)
- **Parameters**:
  - `strategy_address`: Strategy to unpause
  - `caller`: Strategy manager address
- **Returns**: `StrategyResponse` - Transaction XDR and strategy status

### 6. Transaction Management

#### Send Transaction
- **Method**: `sendTransaction(xdr: string, network: SupportedNetworks, launchtube: boolean = false)`
- **Purpose**: Submit signed transaction to Stellar network
- **Parameters**:
  - `xdr`: Signed transaction XDR string
  - `network`: Target network
  - `launchtube`: Use LaunchTube service for submission (optional)
- **Returns**: `TransactionResult` - Transaction hash, status, and result details

### 7. System Operations

#### Health Check
- **Method**: `healthCheck()`
- **Purpose**: Check API and system health status
- **Returns**: `HealthCheckResponse` - API status, indexer status, and any errors

## Type Definitions

### Core Enums

#### SupportedNetworks
- `MAINNET`: Production Stellar network
- `TESTNET`: Test Stellar network

### Authentication Types

#### LoginParams
```typescript
interface LoginParams {
  email: string;
  password: string;
}
```

#### RegisterParams
```typescript
interface RegisterParams {
  email: string;
  password: string;
  username: string;
}
```

#### LoginResponse
```typescript
interface LoginResponse {
  access_token: string;
  refresh_token: string;
  role: string;
  expires_in: number;
}
```

### Vault Types

#### CreateDefindexVault
```typescript
interface CreateDefindexVault {
  roles: {
    0: string; // Emergency Manager
    1: string; // Fee Receiver
    2: string; // Vault Manager
    3: string; // Rebalance Manager
  };
  vault_fee_bps: number;
  assets: VaultAsset[];
  name_symbol: {
    name: string;
    symbol: string;
  };
  upgradable: boolean;
  caller: string;
}
```

#### VaultInfo
```typescript
interface VaultInfo {
  name: string;
  symbol: string;
  totalSupply: string;
  totalAssets: string;
  feesBps: {
    vaultFee: number;
    defindexFee: number;
  };
  assets: VaultAssetInfo[];
  // ... additional vault metadata
}
```

#### DepositToVaultParams
```typescript
interface DepositToVaultParams {
  amounts: number[];
  caller: string;
  invest?: boolean;
  slippageBps?: number;
}
```

#### WithdrawFromVaultParams
```typescript
interface WithdrawFromVaultParams {
  amounts: number[];
  caller: string;
  slippageBps?: number;
}
```

#### WithdrawSharesParams
```typescript
interface WithdrawSharesParams {
  shares: number;
  caller: string;
  slippageBps?: number;
}
```

## Error Handling

### Error Types
The SDK provides comprehensive error handling with specific error types:

1. **Authentication Errors**: Invalid credentials, expired tokens
2. **Validation Errors**: Invalid input parameters, malformed requests
3. **Network Errors**: Stellar network issues, transaction failures
4. **API Errors**: Server errors, rate limiting, maintenance
5. **Authorization Errors**: Insufficient permissions for operations

### Error Response Structure
```typescript
interface APIError {
  message: string;
  statusCode: number;
  timestamp: string;
  path?: string;
  details?: ValidationDetail[];
}
```

### Best Practices
- Always wrap SDK calls in try-catch blocks
- Use specific error type checking for proper handling
- Log errors appropriately for debugging
- Handle network timeouts and retries gracefully

## Vault Management Roles

The DeFindex system supports role-based access control:

### Role Types
1. **Emergency Manager (Role 0)**: Can execute emergency rescues
2. **Fee Receiver (Role 1)**: Receives vault fees
3. **Vault Manager (Role 2)**: Can create and configure vaults
4. **Rebalance Manager (Role 3)**: Can manage strategy allocations

### Access Control
- **Regular Users**: Can deposit, withdraw, and view vault information
- **Vault Managers**: Can create vaults and configure strategies
- **Emergency Managers**: Can execute emergency rescues in crisis situations
- **Strategy Managers**: Can pause/unpause individual strategies

## Development Configuration

### Build System
- **TypeScript**: Target ES2020, CommonJS modules
- **Output**: `dist/` directory with declaration files
- **Source Maps**: Generated for debugging
- **Strict Mode**: Enabled for type safety

### Testing Strategy

#### Unit Tests
- **Location**: `tests/`
- **Framework**: Jest
- **Approach**: Mock all external dependencies
- **Coverage**: Comprehensive coverage of SDK logic
- **Command**: `pnpm test`

#### Integration Tests
- **Location**: `tests/integration/`
- **Framework**: Jest with custom config
- **Approach**: Test against real DeFindex API
- **Requirements**: Valid credentials in environment variables
- **Command**: `pnpm run test:integration`

### Environment Configuration
```bash
# Required for integration tests
export DEFINDEX_API_EMAIL="your_email@example.com"
export DEFINDEX_API_PASSWORD="your_password"
```

### Code Quality
- **ESLint**: TypeScript-specific rules
- **Pre-commit**: Tests and linting before publish
- **Type Safety**: Strict TypeScript configuration

## Security Considerations

### Credential Security
- Store credentials in environment variables
- Never commit credentials to version control
- Use different credentials for different environments
- Rotate credentials regularly

### Server-Side Only
- SDK designed for server-side use only
- Credentials should never be exposed to frontend
- Create proxy endpoints for frontend integration
- Use secure communication channels

### Token Management
- JWT tokens have expiration times
- Implement token refresh logic
- Handle authentication errors gracefully
- Store tokens securely in server memory

## Performance Considerations

### HTTP Client
- Connection pooling via axios
- Configurable timeouts (default 30s)
- Request/response interceptors
- Error transformation and handling

### BigInt Support
- Custom JSON serialization for BigInt values
- Automatic conversion for API compatibility
- Type safety enforced at TypeScript level

### Network Operations
- Network parameter required for most operations
- Efficient API endpoint routing
- Minimal processing overhead

## Migration Context

This SDK was migrated from a Soroswap-based implementation to DeFindex. Key differences:

### Authentication Changes
- **Old**: API key authentication only
- **New**: Both API key authentication (recommended) and email/password + JWT token authentication
- **Impact**: More flexible authentication options, supports user accounts and roles

### Operational Focus
- **Old**: DEX trading operations (swaps, liquidity)
- **New**: Vault management operations (deposits, withdrawals, admin functions)
- **Impact**: Different use cases and workflows

### Architecture Changes
- **Old**: Global network configuration
- **New**: Network parameter per operation
- **Impact**: More flexible multi-network support

### Administrative Features
- **New**: Role-based access control
- **New**: Emergency management operations
- **New**: Strategy pause/unpause functionality

## Examples and Use Cases

### Basic Vault Operations Flow
1. Initialize SDK with credentials
2. Authenticate user (automatic or manual login)
3. Get vault information
4. Perform deposits/withdrawals
5. Monitor vault performance (APY, balances)

### Vault Creation Flow
1. Authenticate with vault manager credentials
2. Get factory address for target network
3. Configure vault parameters and roles
4. Create vault with factory
5. Sign and submit transaction

### Administrative Operations Flow
1. Authenticate with appropriate role credentials
2. Identify vault and strategy to manage
3. Execute administrative operation (pause, rescue, etc.)
4. Sign and submit transaction
5. Verify operation success

### Frontend Integration Pattern
1. Create secure backend API endpoints
2. Proxy DeFindex SDK calls through backend
3. Handle authentication on server-side
4. Return only necessary data to frontend
5. Implement proper error handling

## Package Information

### Dependencies
- **axios**: HTTP client library
- **TypeScript**: Type definitions and compilation
- **Jest**: Testing framework
- **ESLint**: Code linting

### Package Details
- **Name**: `defindex-sdk`
- **License**: MIT
- **Node.js**: >=16.0.0
- **Main**: `dist/index.js`
- **Types**: `dist/index.d.ts`

### Repository
- **GitHub**: https://github.com/paltalabs/defindex-sdk
- **Homepage**: https://defindex.io
- **API Documentation**: https://api.defindex.io/docs

This SDK provides a comprehensive, type-safe interface to the DeFindex ecosystem, enabling developers to build sophisticated DeFi vault management applications on the Stellar network with confidence and ease.