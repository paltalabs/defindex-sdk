{
  "openapi": "3.0.0",
  "paths": {
    "/health": {
      "get": {
        "description": "Checks if the indexer is up and running, and returns which protocols are available for quote requests on each network (mainnet/testnet)",
        "operationId": "AppController_checkHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Health check result - Shows indexer status and available protocols per network",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "indexer": {
                          "type": "object",
                          "properties": {
                            "mainnet": {
                              "type": "array",
                              "items": { "type": "string" },
                              "example": ["soroswap", "phoenix", "aqua"],
                              "description": "Available protocols on mainnet"
                            },
                            "testnet": {
                              "type": "array",
                              "items": { "type": "string" },
                              "example": ["soroswap", "aqua"],
                              "description": "Available protocols on testnet"
                            }
                          }
                        },
                        "reachable": {
                          "type": "boolean",
                          "example": true,
                          "description": "Whether the indexer service is reachable"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Health",
        "tags": ["App"]
      }
    },
    "/api/tokens": {
      "get": {
        "description": "These tokens are for using in testnet, they have already pools created on soroswap and you can mint them on the soroswap frontend while connected on testnet",
        "operationId": "AppController_getTokens",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of tokens available by network",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "network": {
                        "type": "string",
                        "example": "testnet",
                        "description": "Network name"
                      },
                      "assets": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "example": "Stellar Lumens"
                            },
                            "contract": {
                              "type": "string",
                              "example": "CDLZFC3SYJYDZT7K67VZ75HPJVIEUVNIXF47ZG2FB2RMQQVU2HHGCYSC"
                            },
                            "code": { "type": "string", "example": "XLM" },
                            "icon": {
                              "type": "string",
                              "example": "https://assets.coingecko.com/coins/images/100/standard/Stellar_symbol_black_RGB.png"
                            },
                            "decimals": { "type": "number", "example": 7 },
                            "issuer": {
                              "type": "string",
                              "example": "GCPJFNZAARY3Z2AM7RVXDZDLPOEBT4QHTQXFOFKMZHLV7PPDKE2M67Q6",
                              "description": "Optional issuer address"
                            }
                          }
                        }
                      }
                    }
                  },
                  "example": [
                    { "network": "mainnet", "assets": [] },
                    {
                      "network": "testnet",
                      "assets": [
                        {
                          "name": "Stellar Lumens",
                          "contract": "CDLZFC3SYJYDZT7K67VZ75HPJVIEUVNIXF47ZG2FB2RMQQVU2HHGCYSC",
                          "code": "XLM",
                          "icon": "https://assets.coingecko.com/coins/images/100/standard/Stellar_symbol_black_RGB.png",
                          "decimals": 7
                        },
                        {
                          "name": "USDCoin",
                          "contract": "CBBHRKEP5M3NUDRISGLJKGHDHX3DA2CN2AZBQY6WLVUJ7VNLGSKBDUCM",
                          "code": "USDC",
                          "icon": "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png",
                          "decimals": 7
                        },
                        {
                          "name": "Aquarius",
                          "contract": "CCXQWO33QBEUDVTWDDOYLD2SYEJSWUM6DIJUX6NDAOSXNCGK3PSIWQJG",
                          "code": "AQUA",
                          "icon": "https://static.ultrastellar.com/media/assets/img/1878ee2d-2fd1-4e31-89a7-5a430f1596f8.png",
                          "decimals": 7
                        }
                      ]
                    },
                    { "network": "standalone", "assets": [] }
                  ]
                }
              }
            }
          }
        },
        "summary": "Testnet tokens",
        "tags": ["App"]
      }
    },
    "/api/{network}/{contractName}": {
      "get": {
        "description": "Returns the actual contract address for Soroswap contracts on the specified network. Available contracts: factory, router, aggregator. Available networks: mainnet, testnet",
        "operationId": "AppController_getContractAddress",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "contractName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Soroswap contract address for the specified network and contract type",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "string",
                      "example": "CA4HEQTL2WPEUYKYKCDOHCDNIV4QHNJ7EL4J4NQ6VADP7SYHVRYZ7AW2",
                      "description": "The contract address on the specified network"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Soroswap contracts",
        "tags": ["App"]
      }
    },
    "/register": {
      "post": {
        "description": "[Creates a new user account](https://api.soroswap.finance/register) in the system. The account will be disabled until it is activated by an administrator.",
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AuthRegisterDto" },
              "examples": {
                "example1": {
                  "summary": "Register a new user",
                  "value": {
                    "username": "user",
                    "password": "StrongPassword123!",
                    "email": "user@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User test@example.com registered"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The email address is already registered in the system"
          }
        },
        "summary": "Register a new user",
        "tags": ["Auth"]
      }
    },
    "/login": {
      "post": {
        "description": "Authenticates the user and returns access and refresh tokens",
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AuthLoginDto" },
              "examples": {
                "example1": {
                  "summary": "Login with email and password",
                  "value": {
                    "email": "test@example.com",
                    "password": "StrongPassword123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "example": "test@example.com"
                    },
                    "role": { "type": "string", "example": "USER" },
                    "access_token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "refresh_token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "403": { "description": "Invalid credentials or disabled account" }
        },
        "summary": "Login",
        "tags": ["Auth"]
      }
    },
    "/refresh": {
      "post": {
        "description": "Generates a new pair of tokens using the refresh token. Pass the refresh token in the Authorization header as Bearer token.",
        "operationId": "AuthController_refreshTokens",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Tokens refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "example": "test@example.com"
                    },
                    "role": { "type": "string", "example": "USER" },
                    "access_token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "refresh_token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "403": { "description": "Invalid or expired refresh token" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Refresh access token",
        "tags": ["Auth"]
      }
    },
    "/protocols": {
      "get": {
        "description": "Returns the list of protocols available to get quotes on the specified network",
        "operationId": "SwapController_getProtocols",
        "parameters": [
          {
            "name": "network",
            "required": false,
            "in": "query",
            "description": "Network on which the operation will be performed",
            "schema": { "enum": ["testnet", "mainnet"], "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of available protocols",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string" },
                  "example": ["soroswap", "phoenix", "aqua"]
                }
              }
            }
          },
          "400": { "description": "Error getting protocols" }
        },
        "summary": "Available protocols",
        "tags": ["Quote"]
      }
    },
    "/quote": {
      "post": {
        "description": "Calculates the best path to perform a swap using the Soroswap Aggregator. This function allows dividing the swap into multiple routes to get the best possible price.",
        "operationId": "SwapController_quote",
        "parameters": [
          {
            "name": "network",
            "required": false,
            "in": "query",
            "description": "Network on which the operation will be performed",
            "schema": { "enum": ["testnet", "mainnet"], "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Data required to perform the swap",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/QuoteDto" },
              "examples": {
                "exactIn": {
                  "value": {
                    "assetIn": "CAS3J7GYLGXMF6TDJBBYYSE3HQ6BBSMLNUQ34T6TZMYMW2EVH34XOWMA",
                    "assetOut": "CDTKPWPLOURQA2SGTKTUQOWRCBZEORB4BWBOMJ3D3ZTQQSGE5F6JBQLV",
                    "amount": "10000000",
                    "tradeType": "EXACT_IN",
                    "protocols": ["SOROSWAP", "AQUA"],
                    "slippageTolerance": "50",
                    "maxHops": 2,
                    "assetList": ["SOROSWAP", "STELLAR_EXPERT"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Found quote",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "assetIn": {
                      "type": "string",
                      "example": "CAS3J7GYLGXMF6TDJBBYYSE3HQ6BBSMLNUQ34T6TZMYMW2EVH34XOWMA",
                      "description": "Input asset contract address"
                    },
                    "assetOut": {
                      "type": "string",
                      "example": "CDTKPWPLOURQA2SGTKTUQOWRCBZEORB4BWBOMJ3D3ZTQQSGE5F6JBQLV",
                      "description": "Output asset contract address"
                    },
                    "tradeType": {
                      "type": "string",
                      "enum": ["EXACT_IN", "EXACT_OUT"],
                      "example": "EXACT_IN"
                    },
                    "priceImpact": {
                      "type": "object",
                      "properties": {
                        "numerator": { "type": "string", "example": "3" },
                        "denominator": {
                          "type": "string",
                          "example": "1000000"
                        }
                      },
                      "description": "Price impact as a fraction"
                    },
                    "trade": {
                      "type": "object",
                      "properties": {
                        "amountIn": { "type": "string", "example": "9950000" },
                        "amountOutMin": {
                          "type": "string",
                          "example": "2009972"
                        },
                        "expectedAmountOut": {
                          "type": "string",
                          "example": "2020072"
                        },
                        "distribution": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "protocol_id": {
                                "type": "string",
                                "example": "soroswap"
                              },
                              "path": {
                                "type": "array",
                                "items": { "type": "string" },
                                "example": [
                                  "CAS3J7GYLGXMF6TDJBBYYSE3HQ6BBSMLNUQ34T6TZMYMW2EVH34XOWMA",
                                  "CBN3NCJSMOQTC6SPEYK3A44NU4VS3IPKTARJLI3Y77OH27EWBY36TP7U",
                                  "CDTKPWPLOURQA2SGTKTUQOWRCBZEORB4BWBOMJ3D3ZTQQSGE5F6JBQLV"
                                ]
                              },
                              "parts": { "type": "number", "example": 10 },
                              "is_exact_in": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        }
                      }
                    },
                    "feeBps": {
                      "type": "number",
                      "example": 50,
                      "description": "Fee in basis points - only present if fee is specified in the request"
                    },
                    "feeAmount": {
                      "type": "string",
                      "example": "50000",
                      "description": "Fee amount in input asset units - only present if fee is specified in the request"
                    },
                    "xdr": {
                      "type": "string",
                      "example": "AAAAAgAAAAB8shYDi1JO9x2/3jMeVzK2IGtrsFVWLCL4uHRJf+YPyAAAA+gCzi7HAAAApgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAGAAAAAAAAAABc12cL...",
                      "description": "Transaction XDR for execution - only present if \"from\" and \"to\" addresses are provided in the request"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error in input parameters or route not found"
          }
        },
        "summary": "Quote",
        "tags": ["Quote"]
      }
    },
    "/send": {
      "post": {
        "description": "This endpoint allows users to send pre-signed Soroswap transactions to the Stellar blockchain without requiring gas fees. The transaction must be a valid Soroswap operation and must be properly signed before submission.",
        "operationId": "SwapController_sendTransaction",
        "parameters": [
          {
            "name": "network",
            "required": false,
            "in": "query",
            "description": "Network on which the operation will be performed",
            "schema": { "enum": ["testnet", "mainnet"], "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Data of the signed transaction",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SendXdrDto" },
              "examples": {
                "sendTransaction": {
                  "value": {
                    "xdr": "AAAAAgAAAABiSu3MsKtQvDuQO5i2b...",
                    "fee": "100"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction sent successfully to the blockchain",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hash": {
                      "type": "string",
                      "example": "0x123...",
                      "description": "Transaction hash"
                    },
                    "status": {
                      "type": "string",
                      "example": "success",
                      "description": "Transaction status"
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid transaction or signature" }
        },
        "summary": "Send",
        "tags": ["Quote"]
      }
    },
    "/pools": {
      "get": {
        "description": "Retrieves the pools available for a specific network and protocol.\n    \n    GET /pools?network=MAINNET&protocol=SOROSWAP&assetList=SOROSWAP,AQUA",
        "operationId": "PoolsController_getPairs",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "query",
            "description": "Network in which the pairs will be searched",
            "schema": { "enum": ["testnet", "mainnet"], "type": "string" }
          },
          {
            "name": "protocol",
            "required": true,
            "in": "query",
            "description": "Protocol in which the pairs will be searched",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "assetList",
            "required": false,
            "in": "query",
            "description": "Filter pairs by asset lists (e.g. SOROSWAP, AQUA, STELLAR_EXPERT, LOBSTR)",
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of pools",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "protocol": {
                        "type": "string",
                        "example": "soroswap",
                        "description": "Protocol name"
                      },
                      "address": {
                        "type": "string",
                        "example": "CAM7DY53G63XA4AJRS24Z6VFYAFSSF76C3RZ45BE5YU3FQS5255OOABP",
                        "description": "Pool contract address"
                      },
                      "tokenA": {
                        "type": "string",
                        "example": "CAS3J7GYLGXMF6TDJBBYYSE3HQ6BBSMLNUQ34T6TZMYMW2EVH34XOWMA",
                        "description": "First token contract address"
                      },
                      "tokenB": {
                        "type": "string",
                        "example": "CCW67TSZV3SSS2HXMBQ5JFGCKJNXKZM7UQUWUZPUTHXSTZLEO7SJMI75",
                        "description": "Second token contract address"
                      },
                      "reserveA": {
                        "type": "string",
                        "example": "4286614183151",
                        "description": "Reserve amount for token A"
                      },
                      "reserveB": {
                        "type": "string",
                        "example": "1009473414112",
                        "description": "Reserve amount for token B"
                      },
                      "ledger": {
                        "type": "number",
                        "example": 57727251,
                        "description": "Ledger number when data was last updated"
                      }
                    }
                  },
                  "example": [
                    {
                      "protocol": "soroswap",
                      "address": "CAM7DY53G63XA4AJRS24Z6VFYAFSSF76C3RZ45BE5YU3FQS5255OOABP",
                      "tokenA": "CAS3J7GYLGXMF6TDJBBYYSE3HQ6BBSMLNUQ34T6TZMYMW2EVH34XOWMA",
                      "tokenB": "CCW67TSZV3SSS2HXMBQ5JFGCKJNXKZM7UQUWUZPUTHXSTZLEO7SJMI75",
                      "reserveA": "4286614183151",
                      "reserveB": "1009473414112",
                      "ledger": 57727251
                    }
                  ]
                }
              }
            }
          },
          "400": { "description": "Bad Request" },
          "502": { "description": "Invalid request" }
        },
        "summary": "Pools",
        "tags": ["Pools"]
      }
    },
    "/pools/{tokenA}/{tokenB}": {
      "get": {
        "description": "Retrieves the pool for the given tokens",
        "operationId": "PoolsController_getPairByTokens",
        "parameters": [
          {
            "name": "tokenA",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "tokenB",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "network",
            "required": true,
            "in": "query",
            "schema": { "enum": ["testnet", "mainnet"], "type": "string" }
          },
          {
            "name": "protocol",
            "required": true,
            "in": "query",
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of pools",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "protocol": {
                        "type": "string",
                        "example": "soroswap",
                        "description": "Protocol name"
                      },
                      "address": {
                        "type": "string",
                        "example": "CAM7DY53G63XA4AJRS24Z6VFYAFSSF76C3RZ45BE5YU3FQS5255OOABP",
                        "description": "Pool contract address"
                      },
                      "tokenA": {
                        "type": "string",
                        "example": "CAS3J7GYLGXMF6TDJBBYYSE3HQ6BBSMLNUQ34T6TZMYMW2EVH34XOWMA",
                        "description": "First token contract address"
                      },
                      "tokenB": {
                        "type": "string",
                        "example": "CCW67TSZV3SSS2HXMBQ5JFGCKJNXKZM7UQUWUZPUTHXSTZLEO7SJMI75",
                        "description": "Second token contract address"
                      },
                      "reserveA": {
                        "type": "string",
                        "example": "4286614183151",
                        "description": "Reserve amount for token A"
                      },
                      "reserveB": {
                        "type": "string",
                        "example": "1009473414112",
                        "description": "Reserve amount for token B"
                      },
                      "ledger": {
                        "type": "number",
                        "example": 57727251,
                        "description": "Ledger number when data was last updated"
                      }
                    }
                  },
                  "example": [
                    {
                      "protocol": "soroswap",
                      "address": "CAM7DY53G63XA4AJRS24Z6VFYAFSSF76C3RZ45BE5YU3FQS5255OOABP",
                      "tokenA": "CAS3J7GYLGXMF6TDJBBYYSE3HQ6BBSMLNUQ34T6TZMYMW2EVH34XOWMA",
                      "tokenB": "CCW67TSZV3SSS2HXMBQ5JFGCKJNXKZM7UQUWUZPUTHXSTZLEO7SJMI75",
                      "reserveA": "4286614183151",
                      "reserveB": "1009473414112",
                      "ledger": 57727251
                    }
                  ]
                }
              }
            }
          },
          "400": { "description": "Bad Request" }
        },
        "summary": "Pool for two tokens",
        "tags": ["Pools"]
      }
    },
    "/asset-list": {
      "get": {
        "description": "Get all available asset lists or a specific list by name. If no name is provided, returns metadata for all available lists. If a name is provided, returns the complete asset list with all assets.",
        "operationId": "AssetListController_getAssetList",
        "parameters": [
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Name of the specific asset list to retrieve",
            "schema": {
              "enum": ["SOROSWAP", "STELLAR_EXPERT", "LOBSTR", "AQUA"],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Asset list metadata (when no name provided) or complete asset list (when name provided)",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "description": "Array of asset list metadata when no name parameter is provided",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": { "type": "string", "example": "SOROSWAP" },
                          "url": {
                            "type": "string",
                            "example": "https://api.soroswap.finance/asset-list/soroswap.json"
                          }
                        }
                      },
                      "example": [
                        {
                          "name": "SOROSWAP",
                          "url": "https://api.soroswap.finance/asset-list/soroswap.json"
                        },
                        {
                          "name": "AQUA",
                          "url": "https://api.aqua.network/asset-list.json"
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "description": "Complete asset list when name parameter is provided",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "SOROSWAP Asset List"
                        },
                        "provider": { "type": "string", "example": "Soroswap" },
                        "description": {
                          "type": "string",
                          "example": "Official Soroswap asset list"
                        },
                        "assets": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "code": { "type": "string", "example": "USDC" },
                              "issuer": {
                                "type": "string",
                                "example": "GA5ZSEJYB37JRC5AVCIA5MOP4RHTM335X2KGX3IHOJAPP5RE34K4KZVN"
                              },
                              "contract": {
                                "type": "string",
                                "example": "CB64D3G7SM2RTH6JSGG34DDTFTQ5CFDKVDZJZSODMCX4NJ2HV2KN7OHT"
                              },
                              "name": {
                                "type": "string",
                                "example": "USD Coin"
                              },
                              "decimals": { "type": "number", "example": 6 }
                            }
                          }
                        }
                      },
                      "example": {
                        "name": "SOROSWAP Asset List",
                        "provider": "Soroswap",
                        "description": "Official Soroswap asset list",
                        "assets": [
                          {
                            "code": "USDC",
                            "issuer": "GA5ZSEJYB37JRC5AVCIA5MOP4RHTM335X2KGX3IHOJAPP5RE34K4KZVN",
                            "contract": "CB64D3G7SM2RTH6JSGG34DDTFTQ5CFDKVDZJZSODMCX4NJ2HV2KN7OHT",
                            "name": "USD Coin",
                            "decimals": 6
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": { "description": "Asset list not found" }
        },
        "summary": "Get asset lists",
        "tags": ["AssetList"]
      }
    },
    "/price": {
      "get": {
        "description": "Retrieves the price of one or more assets in relation to a reference currency.\n    \n    Example of query: GET /price?network=MAINNET&asset=CB64D3G7SM2RTH6JSGG34DDTFTQ5CFDKVDZJZSODMCX4NJ2HV2KN7OHT&referenceCurrency=USD",
        "operationId": "PriceController_getPrice",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "query",
            "description": "Network in which the price will be searched",
            "schema": { "enum": ["testnet", "mainnet"], "type": "string" }
          },
          {
            "name": "asset",
            "required": true,
            "in": "query",
            "description": "Asset contract address or list separated by commas",
            "schema": {
              "example": "CB64D3G7SM2RTH6JSGG34DDTFTQ5CFDKVDZJZSODMCX4NJ2HV2KN7OHT",
              "type": "array",
              "items": { "type": "string" }
            }
          },
          {
            "name": "referenceCurrency",
            "required": false,
            "in": "query",
            "description": "Reference currency (default USD)",
            "schema": { "example": "USD", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the price data. Always uses the asset contract address.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "asset": {
                        "type": "string",
                        "example": "CB64D3G7SM2RTH6JSGG34DDTFTQ5CFDKVDZJZSODMCX4NJ2HV2KN7OHT"
                      },
                      "referenceCurrency": {
                        "type": "string",
                        "example": "USD"
                      },
                      "price": { "type": "string", "example": "1.000000" }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Price information",
        "tags": ["Price"]
      }
    },
    "/liquidity/add": {
      "post": {
        "operationId": "LiquidityController_addLiquidity",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AddLiquidityDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the transaction xdr and information about the pool"
          },
          "400": { "description": "Bad Request" }
        },
        "summary": "Add liquidity to a pool",
        "tags": ["Liquidity"]
      }
    },
    "/liquidity/remove": {
      "post": {
        "operationId": "LiquidityController_removeLiquidity",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RemoveLiquidityDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the transaction xdr and information about the pool"
          },
          "400": { "description": "Bad Request" }
        },
        "summary": "Remove liquidity from a pool",
        "tags": ["Liquidity"]
      }
    },
    "/liquidity/positions/{address}": {
      "get": {
        "description": "Retrieves all liquidity positions for a specific user address.\n\nExample: GET /liquidity/positions/GALAXYVOIDAOPZTDLHILAJQKCVVFMD4IKLXLSZV5YHO7VY74IWZILUTO?network=mainnet",
        "operationId": "LiquidityController_getUserPosition",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "network",
            "required": true,
            "in": "query",
            "description": "Network to query positions on",
            "schema": { "enum": ["mainnet", "testnet"], "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of user positions with pool information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "poolInfo": {
                        "type": "object",
                        "properties": {
                          "protocol": {
                            "type": "string",
                            "example": "soroswap",
                            "description": "Protocol name"
                          },
                          "address": {
                            "type": "string",
                            "example": "CAM7DY53G63XA4AJRS24Z6VFYAFSSF76C3RZ45BE5YU3FQS5255OOABP",
                            "description": "Pool contract address"
                          },
                          "tokenA": {
                            "type": "string",
                            "example": "CAS3J7GYLGXMF6TDJBBYYSE3HQ6BBSMLNUQ34T6TZMYMW2EVH34XOWMA",
                            "description": "First token contract address"
                          },
                          "tokenB": {
                            "type": "string",
                            "example": "CCW67TSZV3SSS2HXMBQ5JFGCKJNXKZM7UQUWUZPUTHXSTZLEO7SJMI75",
                            "description": "Second token contract address"
                          },
                          "reserveA": {
                            "type": "string",
                            "example": "4286614183151",
                            "description": "Reserve amount for token A"
                          },
                          "reserveB": {
                            "type": "string",
                            "example": "1009473414112",
                            "description": "Reserve amount for token B"
                          },
                          "ledger": {
                            "type": "number",
                            "example": 57727251,
                            "description": "Ledger number when data was last updated"
                          }
                        }
                      },
                      "userPosition": {
                        "type": "string",
                        "example": "18305475",
                        "description": "User liquidity position amount"
                      }
                    }
                  },
                  "example": [
                    {
                      "poolInfo": {
                        "protocol": "soroswap",
                        "address": "CAM7DY53G63XA4AJRS24Z6VFYAFSSF76C3RZ45BE5YU3FQS5255OOABP",
                        "tokenA": "CAS3J7GYLGXMF6TDJBBYYSE3HQ6BBSMLNUQ34T6TZMYMW2EVH34XOWMA",
                        "tokenB": "CCW67TSZV3SSS2HXMBQ5JFGCKJNXKZM7UQUWUZPUTHXSTZLEO7SJMI75",
                        "reserveA": "4286614183151",
                        "reserveB": "1009473414112",
                        "ledger": 57727251
                      },
                      "userPosition": "18305475"
                    }
                  ]
                }
              }
            }
          },
          "400": { "description": "Bad Request" }
        },
        "summary": "Get user positions in pools",
        "tags": ["Liquidity"]
      }
    }
  },
  "info": {
    "title": "Soroswap API",
    "description": "Soroswap.Finance is the first DEX and exchange aggregator built on Stellar, powered by smart contracts on Soroban.\n\nIf you're new here, we recommend starting reading [What is Soroswap Finance?](https://docs.soroswap.finance/) for a full overview of how the platform works.\n\nSoroswap operates as:\n\n- 🌀 An Automated Market Maker (AMM) via Soroswap AMM for direct token swaps and liquidity provisioning\n\n- 🧠 An [AMM Aggregator](https://medium.com/soroswap/how-runtime-verification-helped-soroswap-transform-into-an-amm-aggregator-fb63aa41ac49) via Soroswap Aggregator, optimizing trades across multiple protocols to secure the best execution\n\nTogether, these components deliver a powerful, decentralized trading experience on the Soroban smart contract platform.",
    "version": "1.0",
    "contact": {},
    "x-logo": {
      "url": "https://links.paltalabs.io/soroswap-full.svg",
      "backgroundColor": "#0e0e0e",
      "altText": "Soroswap Logo",
      "href": "https://soroswap.finance"
    }
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": { "scheme": "bearer", "bearerFormat": "JWT", "type": "http" }
    },
    "schemas": {
      "AuthRegisterDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "User username",
            "example": "user"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "example": "StrongPassword123!"
          },
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@example.com"
          }
        },
        "required": ["username", "password", "email"]
      },
      "AuthLoginDto": {
        "type": "object",
        "properties": {
          "email": { "type": "string", "example": "test@example.com" },
          "password": { "type": "string", "example": "strongpassword123" }
        },
        "required": ["email", "password"]
      },
      "QuoteDto": {
        "type": "object",
        "properties": {
          "assetIn": {
            "type": "string",
            "example": "CAS3J7GYLGXMF6TDJBBYYSE3HQ6BBSMLNUQ34T6TZMYMW2EVH34XOWMA"
          },
          "assetOut": {
            "type": "string",
            "example": "CCW67TSZV3SSS2HXMBQ5JFGCKJNXKZM7UQUWUZPUTHXSTZLEO7SJMI75"
          },
          "amount": {
            "format": "int64",
            "type": "integer",
            "example": "10000000"
          },
          "tradeType": {
            "type": "string",
            "example": "EXACT_IN",
            "enum": ["EXACT_IN", "EXACT_OUT"]
          },
          "protocols": {
            "example": ["soroswap", "aqua"],
            "type": "array",
            "items": { "type": "array" }
          },
          "parts": { "type": "number", "example": 10 },
          "slippageTolerance": {
            "type": "string",
            "example": "50",
            "description": "Slippage tolerance in basis points (bps). 10000 = 100%, 100 = 1%, 50 = 0.5%. Default is 50 bps (0.5%)"
          },
          "maxHops": { "type": "number", "example": 2 },
          "assetList": {
            "example": ["SOROSWAP", "STELLAR_EXPERT", "AQUA", "LOBSTR"],
            "type": "array",
            "items": { "type": "string" }
          },
          "feeBps": {
            "type": "number",
            "example": 50,
            "description": "Fee in basis points (bps). 10000 = 100%, 100 = 1%, 50 = 0.5%"
          },
          "referralId": {
            "type": "string",
            "description": "The referral id wallet address (required when feeBps is provided)"
          },
          "from": {
            "type": "string",
            "description": "The wallet address that will sign the transaction"
          },
          "to": {
            "type": "string",
            "description": "The wallet address that will receive the funds"
          }
        },
        "required": ["assetIn", "assetOut", "amount", "tradeType", "protocols"]
      },
      "SendXdrDto": {
        "type": "object",
        "properties": {
          "xdr": {
            "type": "string",
            "description": "The signed transaction in XDR format"
          },
          "fee": {
            "type": "number",
            "description": "The fee to pay for the transaction, needs to be less than 201 stroops"
          }
        },
        "required": ["xdr", "fee"]
      },
      "AddLiquidityDto": {
        "type": "object",
        "properties": {
          "assetA": { "type": "string", "example": "CAS3J7GY..." },
          "assetB": { "type": "string", "example": "CCW67TSZ..." },
          "amountA": {
            "format": "int64",
            "type": "integer",
            "example": "10000000"
          },
          "amountB": {
            "format": "int64",
            "type": "integer",
            "example": "10000000"
          },
          "to": { "type": "string", "example": "GALAXYVOID..." },
          "slippageTolerance": {
            "type": "string",
            "example": "50",
            "description": "Slippage tolerance in basis points (bps). 10000 = 100%, 100 = 1%, 50 = 0.5%. Default is 50 bps (0.5%)"
          }
        },
        "required": ["assetA", "assetB", "amountA", "amountB", "to"]
      },
      "RemoveLiquidityDto": {
        "type": "object",
        "properties": {
          "assetA": {
            "type": "string",
            "example": "CAS3J7GYLGXMF6TDJBBYYSE3HQ6BBSMLNUQ34T6TZMYMW2EVH34XOWMA"
          },
          "assetB": {
            "type": "string",
            "example": "CCW67TSZV3SSS2HXMBQ5JFGCKJNXKZM7UQUWUZPUTHXSTZLEO7SJMI75"
          },
          "liquidity": {
            "format": "int64",
            "type": "integer",
            "example": "10000000"
          },
          "amountA": {
            "format": "int64",
            "type": "integer",
            "example": "10000000"
          },
          "amountB": {
            "format": "int64",
            "type": "integer",
            "example": "10000000"
          },
          "to": {
            "type": "string",
            "example": "GALAXYVOIDAOPZTDLHILAJQKCVVFMD4IKLXLSZV5YHO7VY74IWZILUTO"
          },
          "slippageTolerance": {
            "type": "string",
            "example": "50",
            "description": "Slippage tolerance in basis points (bps). 10000 = 100%, 100 = 1%, 50 = 0.5%. Default is 50 bps (0.5%)"
          }
        },
        "required": [
          "assetA",
          "assetB",
          "liquidity",
          "amountA",
          "amountB",
          "to"
        ]
      }
    }
  }
}
